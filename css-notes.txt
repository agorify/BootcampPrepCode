Compound Selector:

h1, h2, #abc {
	Declarations ... 
}

in this case, the tag h1, h2 and id #abc will share the css declarations defined inside the {}

Descendent Selector:

#nav li {
	Declarations ...
}

<ul id="nav">
	<li>child</li>
</ul>

in this case, the tag li inside nav will be found and applied with css declarations defined. 

Child Selector

#list > li {
	Declarations ...
}

<ul id="list">
	<li>child
		<ul><li>grandchild</li></ul>
	</li>
</ul>

in this case, only qualified children will be applied with styles. Grandchildrenwill not be affected.

Sibling Selector

h3 + p {
	Declarations ...
}

Selects only sibling elements that appear directly after the matching selector name. 

<h3> H3 </h3>
<p> abc </p>
<p> not selected </p>

Preceded Selectors

.styleafter ~ h2 {
	Declarations ...
}

Styles all matched elements preceding after the selector name. 
<p class="styleafter">Class</p>
<h2> h2 positioned after </h2>


Attribute Selector

img[alt="Cat"] {
	Declarations ...
}

Selects elements who have an attribute with matching value condition

<img src="myimage.jpg" alt="Cat">

More examples:

a[href^="http"] ... starts with <a href="http://...">A</a>

p[class$="dog"] ... ends with <p class="something dog">...</p>

img[alt*="love"] ... Anywhere within <img src="heart.jpg" alt="I love you">

p[class~="dog"] ... Space separated <p class="shelter dog hey"...</p>
p[class|="dogs"] ... Dash separated <p class="new-dogs-today">...</p>

Pseudo Class Selector

a:link {}	untouched
a:visited {}	Already visited
a:hover {}	On mouse hover
a:active {}	On mouse click

p:first-child {}
p:last-child {}

<p> first </p>
<p> lorem </p>
<p> last </p>
